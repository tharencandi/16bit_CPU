`timescale 1ns / 1ps
 
module control_unit_TB;
 
	// ------------------ Instantiate module ------------------
	// We are instantiating the module mux2, naming it instantiate_mux2.
	// select, input1, input2 are controlled by the testbench, output is 
	// checked  within the testbench
 
	reg [3:0] count;
	reg clock, rst;
	reg [15:0] instr;
	
	wire gin, gout, pcin, pcout, addsub, a_in, xorctrl, ctrl_out;
	wire [15:0] bus_out;
	wire [7:0] rin,rout;
	
	
	control_unit(.clk(clk), .rst(rst), .instr(instr), .rin(rin), .rout(rout), .gin(gin), .gout(gout), .pcin(pcin), .pcout(pcout), .addsub(addsub),.a_in(a_in), .xorctrl(xorctrl), .ctrl_out(ctrl_out), .bus_out(bus_out));
 	
	initial begin 
		count = 4'b0000;
		clk = 1'b1;
	end
	
	always begin
		#50
		clk = 1'b0;
		count=count+4'b0001;
		
		#50
		clk = 1'b1;
		count=count+4'b0001;
	end
	
	always @(count) begin
		case (count)
		4'b0000 : begin rst = 1'b1; instr = 16'b0; end
		
		4'b0001 : begin rst = 1'b0; instr = 16'b000 010 11111111 00; end // test load rx = 2 d = 11111111
		4'b0010 : begin rst = 1'b0; instr = 16'b001 110 001 0000000; end //test move rx = 7 ry = 1
		4'b0011 : begin rst = 1'b0; instr = 16'b101 111 0000000000; end // test ldpc rx = 8
		4'b0100 : begin rst = 1'b0; instr = 16'b101 111 0000000000; end // test branch rx = 8
		4'b0101 : begin rst = 1'b0; instr = 16'b0; end
		4'b0110 : begin rst = 1'b0; instr = 16'b0; end
		4'b0111 : begin rst = 1'b0; instr = 16'b0; end
		4'b1000 : begin rst = 1'b0; instr = 16'b0; end
		4'b1001 : begin rst = 1'b0; instr = 16'b0; end
		
		default : begin rst = 1'b0; instr = 16'b0; end
	endcase
	end

 
endmodule
